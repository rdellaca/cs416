<html>
<title>D3.js Visualization - Roger Dellaca</title>
<script src='https://d3js.org/d3.v5.min.js'></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script>

<style>
/* Style for scene links
a.scene-link {
  padding: 5px;
  background-color: #444;
  color: #666;
  text-decoration: none;
}

a.scene-link:hover, a.selected {
  color: #ddd;
}
*/

/* divs */
#top{
  margin: auto;
  padding-top: 20px;
  width: 980px;
}

#graph{
  width: 500px;
  float: left;
  overflow: hidden;
}
#details{
  width: 480px;
  float:right;
  overflow: hidden;
}

#offscreen{
  margin-left: 100%;
  overflow: hidden;
}


</style>



<body>
 <div id="top">
    <h1>Bitcoin Investment Dynamics</h1>
    <h2></h2>
    <div id="nav">
      <a href="#" id="scene1" class="scene-link selected" onclick = "return changeScene(1);">Scene 1</a>
      <a href="#" id="scene2" class="scene-link" onclick = "return changeScene(2);">Scene 2</a>
      <a href="#" id="scene3" class="scene-link" onclick = "return changeScene(3);">Scene 3</a>
    </div>

<div id="graph">
  <div id="graph1">
  </div>
</div>
<div id="details">
</div>
<div id="offscreen">
  <div id="graph2">
  </div>
  <div id="graph3">
  </div>
</div>



</body>

<script>
// data placeholder
var BTC_SPY_data;
// track which scene is active
var activeScene = 1;

//size parameters
var margin = {top: 10, right: 30, bottom: 30, left: 60},
    width = 460 - margin.left - margin.right,
    height = 400 - margin.top - margin.bottom;


// Attach to the SVG to the graph div
var graph1 = d3.select("#graph1");
var graph2 = d3.select("#graph2");
var graph3 = d3.select("#graph3");
var offscreen = document.getElementById("offscreen");

var svg = graph1.append("svg")
  svg.append("g")
     .attr("transform",
          "translate(" + margin.left + "," + margin.top + ")");
var svg2 = graph2.append("svg")
  svg2.append("g")
    .attr("transform",
          "translate(" + margin.left + "," + margin.top + ")");
var svg3 = graph3.append("svg")
  svg3.append("g")
    .attr("transform",
          "translate(" + margin.left + "," + margin.top + ")");

  svg.attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
    svg2.attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
      svg3.attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)

// Make a variable for the text details
var div_details = document.getElementById('details');


// Load the data
d3.csv("BTC-USD-SPY-daily-prices.csv", function(d) {
	    d.Date = d3.timeParse("%Y-%m-%d")(d.Date); // store as Date object
	    d.BTC_Close = +d.BTC_Close;
      d.BTC_Volume = +d.BTC_Volume;
      d.Pctchange_BTC_1day = +d.Pctchange_BTC_1day;
      d.Pctchange_BTC_1week = +d.Pctchange_BTC_1week;
      d.Pctchange_BTC_4weeks = +d.Pctchange_BTC_4weeks;
      d.SPY_Close = +d.SPY_Close;
      d.SPY_Volume = +d.SPY_Volume;
      d.Pctchange_SPY_1day = +d.Pctchange_SPY_1day;
      d.Pctchange_SPY_1week = +d.Pctchange_SPY_1week;
      d.Pctchange_SPY_4weeks = +d.Pctchange_SPY_4weeks;
      return d;
	  }).then(function(data) {
    BTC_SPY_data = data;
    loadScene1(BTC_SPY_data);
    loadScene2(BTC_SPY_data);
    loadScene3(BTC_SPY_data);
    setDetails(1);
  });

// Scene 1
function loadScene1(data) {

  // Add X axis --> date format
    var x = d3.scaleTime()
      .domain(d3.extent(data, function(d) { return d.Date; }))
      .range([ 0, width ]);
    svg.append("g")
      .attr("transform", "translate(0," + height + ")")
      .call(d3.axisBottom(x).tickFormat(d3.timeFormat("%b,%y")));

  // text label for the X axis
     svg.append("text")
         .attr("transform",
               "translate(" + (width/2) + " ," + (height + margin.bottom) + ")")
         .style("text-anchor", "middle")
         .text("Date");

// Add Y axis
    var y = d3.scaleLinear()
      .domain([0, d3.max(data, function(d) { return +d.BTC_Close; })])
      .range([ height, 0 ]);
    svg.append("g")
      .call(d3.axisLeft(y));

  // text label for the Y axis
      svg.append("text")
          .attr("transform", "rotate(-90)")
          .attr("y", 0 - margin.left)
          .attr("x",0 - (height / 2))
          .attr("dy", "1em")
          .style("text-anchor", "middle")
          .text("BTC-USD Price");

  // Add the line
    svg.append("path")
      .datum(data)
      .attr("fill", "none")
      .attr("stroke", "steelblue")
      .attr("stroke-width", 1.5)
      .attr("d", d3.line()
        .x(function(d) { return x(d.Date) })
        .y(function(d) { return y(d.BTC_Close) })
      );

};

function addScene1Volume(data) {
  // add volume bars under the price if selected

  // setup
  var x = d3.scaleTime()
    .domain(d3.extent(data, function(d) { return d.Date; }))
    .range([ 0, width ]);

  const yMinVolume = d3.min(data, d => {
    return Math.min(d['BTC_Volume']);
  });
  const yMaxVolume = d3.max(data, d => {
    return Math.max(d['BTC_Volume']);
  });
  const yVolumeScale = d3
    .scaleLinear()
    .domain([yMinVolume, yMaxVolume])
    .range([height, height/2]);

  // add to chart
  svg.selectAll('rect').data(data).enter().append('rect')
    .attr('x', function(d) { return x(d.Date) })
    .attr('y', function(d) { return yVolumeScale(d['BTC_Volume']) })
    .attr('fill', (d, i) => {
      if (i === 0) { return '#03a678';
    } else {  return data[i - 1].BTC_Close > d.BTC_Close ? '#c0392b' : '#03a678';
      }
    })
    .attr('width', 1)
    .attr('height', d => {
      return height - yVolumeScale(d['BTC_Volume']);
    });

  };

// end scene 1

// Scene 2
function loadScene2(data) {
  // Add X axis --> date format
    var x = d3.scaleTime()
      .domain(d3.extent(data, function(d) { return d.Date; }))
      .range([ 0, width ]);
    svg2.append("g")
      .attr("transform", "translate(0," + height + ")")
      .call(d3.axisBottom(x).tickFormat(d3.timeFormat("%b,%y")));

  // text label for the X axis
     svg2.append("text")
         .attr("transform",
               "translate(" + (width/2) + " ," + (height + margin.bottom) + ")")
         .style("text-anchor", "middle")
         .text("Date");

// Add Y axis
    var y = d3.scaleLinear()
      .domain([d3.min(data, function(d) { return +d.Pctchange_BTC_1day; }), d3.max(data, function(d) { return +d.Pctchange_BTC_1day; })])
      .range([ height, 0 ]);
    svg2.append("g")
      .call(d3.axisLeft(y));

  // text label for the Y axis
      svg2.append("text")
          .attr("transform", "rotate(-90)")
          .attr("y", 0)
          .attr("x",0 - (height / 2))
          .attr("dy", "1em")
          .style("text-anchor", "middle")
          .text("Pct change");

  // Add the line
    svg2.append("path")
      .datum(data)
      .attr("fill", "none")
      .attr("stroke", "steelblue")
      .attr("stroke-width", 1.5)
      .attr("d", d3.line()
        .x(function(d) { return x(d.Date) })
        .y(function(d) { return y(d.Pctchange_BTC_1day) })
      );

      // Add the 2nd line
        svg2.append("path")
          .datum(data)
          .attr("fill", "none")
          .attr("stroke", "red")
          .attr("stroke-width", 1.5)
          .attr("d", d3.line()
            .x(function(d) { return x(d.Date) })
            .y(function(d) { return y(d.Pctchange_SPY_1day) })
          );


};

function setDetails(sceneNum) {
  // Add the detail text
if (sceneNum==1) {
  div_details.innerHTML = "<p>This chart shows the daily closing price of BTC-USD (Bitcoin in US Dollars).";
  div_details.innerHTML += "<p>Bitcoin is the world’s first decentralized cryptocurrency – a type of digital asset that uses public-key cryptography to record, sign and send transactions over the Bitcoin blockchain.";
  div_details.innerHTML += "<p>The chart is from Feb 2018 to May 21.";
  div_details.innerHTML += "<p>You can add the daily volume to the chart by clicking here: <button onclick='addScene1Volume(BTC_SPY_data)'>Add!</button>";
} else if (sceneNum==2) {
  // Add the detail text
  div_details.innerHTML = "<p>This chart shows the Percent change in Bitcoin (BTC) versus an S&P 500 index fund (SPY).";
  div_details.innerHTML += "<p>This compare the volatility in price of these 2 assets.";
  div_details.innerHTML += "<p>The chart is from Feb 2018 to May 21.";
  div_details.innerHTML += "<p>By default, it is a 1-day chane in price. You can select an alternate period here: ";
  div_details.innerHTML += "<select id='scene2Period' onchange='changePeriod();'><option value='1'>1 Day</option><option value='2'>1 Week</option><option value='3'>4 Weeks</option></select>";

} else {
  //
}
};

function changePeriod() {
  var selectBox = document.getElementById("scene2Period");
  var selectedValue = selectBox.options[selectBox.selectedIndex].value;
  svg.selectAll("path").remove();

if (selectedValue == 1) {
  // Add the line
    svg2.append("path")
      .datum(data)
      .attr("fill", "none")
      .attr("stroke", "steelblue")
      .attr("stroke-width", 1.5)
      .attr("d", d3.line()
        .x(function(d) { return x(d.Date) })
        .y(function(d) { return y(d.Pctchange_BTC_1day) })
      );

      // Add the 2nd line
        svg2.append("path")
          .datum(data)
          .attr("fill", "none")
          .attr("stroke", "red")
          .attr("stroke-width", 1.5)
          .attr("d", d3.line()
            .x(function(d) { return x(d.Date) })
            .y(function(d) { return y(d.Pctchange_SPY_1day) })
          );
        } else if (selectedValue == 2) {
          // Add the line
            svg2.append("path")
              .datum(data)
              .attr("fill", "none")
              .attr("stroke", "steelblue")
              .attr("stroke-width", 1.5)
              .attr("d", d3.line()
                .x(function(d) { return x(d.Date) })
                .y(function(d) { return y(d.Pctchange_BTC_1week) })
              );

              // Add the 2nd line
                svg2.append("path")
                  .datum(data)
                  .attr("fill", "none")
                  .attr("stroke", "red")
                  .attr("stroke-width", 1.5)
                  .attr("d", d3.line()
                    .x(function(d) { return x(d.Date) })
                    .y(function(d) { return y(d.Pctchange_SPY_1week) })
                  );
          } else if (selectedValue == 3) {
            // Add the line
              svg2.append("path")
                .datum(data)
                .attr("fill", "none")
                .attr("stroke", "steelblue")
                .attr("stroke-width", 1.5)
                .attr("d", d3.line()
                  .x(function(d) { return x(d.Date) })
                  .y(function(d) { return y(d.Pctchange_BTC_4weeks) })
                );

                // Add the 2nd line
                  svg2.append("path")
                    .datum(data)
                    .attr("fill", "none")
                    .attr("stroke", "red")
                    .attr("stroke-width", 1.5)
                    .attr("d", d3.line()
                      .x(function(d) { return x(d.Date) })
                      .y(function(d) { return y(d.Pctchange_SPY_4weeks) })
                    );
          }

}
// Scene 3
function loadScene3(data) {

};

// change scene
function changeScene(sceneNum) {
  if (sceneNum != activeScene) {
    console.log("changing scene to ", sceneNum);
    // hide active scene
    if (activeScene == 1) {
      offscreen.appendChild(document.getElementById("graph1"))
    } else if (activeScene == 2) {
      offscreen.appendChild(document.getElementById("graph2"))
    } else {
      offscreen.appendChild(document.getElementById("graph3"))
    }
    // display new scene
    if (sceneNum == 1) {
      graph.appendChild(document.getElementById("graph1"))
    } else if (sceneNum == 2) {
      graph.appendChild(document.getElementById("graph2"))
    } else {
      graph.appendChild(document.getElementById("graph3"))
    }
    setDetails(sceneNum);
    activeScene = sceneNum;
  }
};


</script>
</html>
